
const script = {};
const GET_TEXT = "get text"; // just to add the color
script["start"] = [
  "Tout d'abord, rien qu'en lisant la pr√©sentation de notre sujet, que savez-vous dessus.<br> Quels sont vos \"√†-priori\" sur ce sujet ?",
  GET_TEXT, // wainting text
  "Il est fort probable que vous ayez parl√© de t√©l√©travail, de confinement, et de cours √† distance.",
  `C'est en fait la premi√®re id√©e re√ßue sur ce sujet, et ce n'est pas vraiment ce que l'on cherche √† traiter dans notre expos√©.

Ce que nous souhaitons d√©montrer, ce n'est pas que le num√©rique puisse remplacer l'√©ducation, mais plut√¥t rendre les cours plus efficaces ou plus int√©ressants en se servant des outils num√©riques.
Nous pensons que bien entendu, cette pratique doit √™tre encadr√©e par un enseignant comp√©tant.`,
  "modal explication_Apriori", // modal_opened ??
  {
    "choice": "√™tes-vous : ",
    "Un √©l√®ve d√©solaris√©, ou qui fait cours √† distance cette ann√©e (hors contexte de confinement) ?": "next",
    "Un √©l√®ve au Coll√®ge": "next",
    "Un √©l√®ve au Lyc√©e": "next",
    "Un √©tudiant": "Appliquer notre sujet dans les classes sup√©rieures reste possible, mais un poil plus difficile compar√© au coll√®ge ou au lyc√©e.",
    "Un prof": "jump profs",
    "Un parent d'√©l√®ve ou autre ?": "jump autre",
  }, // waiting choice
  "jump label"
];

script["profs"] = [
  "Vous √™tes dans la partie profs",
  "coucou !!!"
];

script["autre"] = [
  "Vous √™tes dans la partie autre",
  "coucou !!!"
];

script["label"]  = [
  "vous avez atteint la fin ! salut ! ",
  "hyeay heay"
]

modals = {};
modals["explication_Apriori"] = `
Il est fort probable que vous ayez parl√© de t√©l√©travail, de confinement, et de cours √† distance.

C'est en fait la **premi√®re id√©e re√ßue sur ce sujet**, et ce n'est pas vraiment ce que l'on cherche √† traiter dans notre expos√©.

Ce que nous souhaitons d√©montrer, ce n'est pas que le num√©rique puisse remplacer l'√©ducation, mais plut√¥t rendre les cours **plus efficaces ou plus int√©ressants en se servant des outils num√©riques**.
Nous pensons que bien entendu, cette pratique doit √™tre encadr√©e par un enseignant comp√©tant.

En fait, avec les nouvelles r√©formes, nous pouvons d√©j√† voir des tentatives d'applications num√©riques en classe au coll√®ge et au lyc√©e :
* Utilisation d'un espace num√©rique de travail et apprentissage des bases de l'informatique
* Visualisation de courbes d'√©quations en maths

Certains profs peuvent innover. Vous avez s√ªrement d√ª voir ces id√©es-l√† :
* Quizz typique d'une √©mission t√©l√©vis√©e projet√©, o√π les √©l√®ves en groupe r√©pondent depuis leurs t√©l√©phone afin de les faire r√©viser
* Stimulations d'exp√©riences ou PowerPoint tr√®s interactifs pour les cours
* QCM en temps r√©el avec des QR-Codes
* Travail de groupe avec des outils de collaboration en temps r√©el (google docs, etherpad, codeshare...)
* Utilisation des s√©ries pour faire r√©viser les langues
* Interrogations avec des questions dans un contenu ou dispos√©es dans un ordre al√©atoire, et corrig√©es de mani√®re semi-automatique.


Le confinement, m√™me si on en a surtout tir√© du mal, a permis l'√©mergence de nouvelles m√©thodes :
* Les cours √† la t√©l√© via la maison lumni. D'ailleurs, diffuser des extraits de reportages ou de s√©ries permettent bien souvent de dynamiser un cours pour faire des d√©bats en philosophie.
* Utilisation de logiciels de messagerie et de visio conf√©rences pour faire des d√©bats mieux argument√©s, ou pour faire passer des extraits ou des r√©f√©rences num√©riques.
* Toujours dans la messagerie, mais plus dans l'aspect du support : parler par le texte permets une certaine libert√© sur les mots, et donc aussi de se sentir plus proche avec ses √©l√®ves, sans compter une plus grande flexibilit√© dans les horaires ou dans l'organisation. Cela permet aussi de motiver certains √©l√®ves qui sont plus discrets √† l'oral, ou bien le fait de pouvoir envoyer ses r√©ponses par le tchat am√©liore la participation. On n'a plus vraiment peur de se couper la parole aussi.

`;
const app = new Vue({
  el: "#app",
  data: {
    introduction_step: 0,
    button_msg: ["Bonjour Logan !", "Tr√®s bien, c'est parti !", "Continuer"],
    bot_conversation: [
      {by: "bot", msg: "Salut üëã!"}
    ],
    entities: {
      bot: {
        name: "Logan",
        profile_pic: "https://cdn.discordapp.com/avatars/272777471311740929/38b1ea1854ab8feb4de04004fe01f99b.webp?size=32"
      },
      player: {
        name: "Canard-Man",
        profile_pic: "https://cdn.discordapp.com/avatars/451467396612489238/ca5c1080353f8b7a89ad4f791c6e7ef8.webp?size=32"
      }
    }
  },
  computed: {
  },
  methods: {
    introduction_nextStep() {
      this.introduction_step++;
    },

    //tchatbot commands
    async runLabel(labelName = "start") {
      if (! Array.isArray( script[labelName] )) {
        throw `Label ${labelName} don't exist`;
      }
      for (let key in script[labelName]) {
        const val = script[labelName][key];
        try {
          const reply = await this.evalCmd(val);
          if (reply == "end") {
            return "end";
          }
        } catch (e) {
          console.error(`Label ${labelName}, instruction ${key} : ${e}`);
        }
      }
      return "ok";
    },
    async evalCmd(cmd) {
      if (typeof cmd === "string") {
        const cmdRegex = /(\w+)\s+(.+)/m;
        if (cmd == "end") {
          return "stop";
        } else if (cmd == "next") {
          return "ok";
        } else if (! cmdRegex.test(cmd)) {
          throw "Error : The string should respect the format (command) (... arguments)";
        }
        const [string, command_name, command_argument] = cmdRegex.exec(cmd);
        switch (command_name) {
          case "get":
            await this.cmd_getText();
            break;
          case "modal":
            await this.cmd_modal(command_argument);
            break;
          case "jump":
            return await this.runLabel(command_argument);
            break;
          default:
            await this.cmd_say(cmd);
            break;
        }
      } else if (typeof cmd === "object") {
        if (typeof cmd.choice === "string") {
          const result = await this.cmd_choice(cmd);
          this.evalCmd(result);
        } else {
          console.error(`object should be a choice`);
        }
      }
      return "ok";
    },
    async cmd_getText() {
      const reply = window.prompt("Entr√©e attendue : ");
      app.bot_conversation.push({
        by: "player",
        msg: reply
      });
      return true;
    },
    async cmd_say(arg) {
      return new Promise(function(resolve, reject) {
        setTimeout(function() {
          app.bot_conversation.push({
            by: "bot",
            msg: arg
          });
          resolve();
        }, 1000);
      });
    },
    async cmd_choice(choiceObj) {
      for (let question in choiceObj) {
        if (question == "choice") {
          alert(choiceObj[question]);
          continue;
        }
        if (window.confirm(question)) {
          return choiceObj[question];
        }
      }
      return "end";
    },
    async cmd_modal(arg) {
      console.log(">> cmd_modal: ", modals[arg]);
      return true;
    }
  }
});
